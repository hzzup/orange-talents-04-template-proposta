# data source
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${DB_URL:localhost:5433/proposta_database}
spring.datasource.username=${DB_USER:myuser}
spring.datasource.password=${DB_PASS:mypass}

# jpa
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.format_sql=true

#Feign
feign.client.config.analise.read-timeout=${ANALISE_READ_TIMEOUT:3000}
feign.client.config.analise.connect-timeout=${ANALISE_CONNECT_TIMEOUT:5000}
feign.client.config.cartao.read-timeout=${CARTAO_READ_TIMEOUT:5000}
feign.client.config.cartao.connect-timeout=${CARTAO_CONNECT_TIMEOUT:5000}
feign.client.config.cartaoBlock.read-timeout=${CARTAOBLOCK_READ_TIMEOUT:8000}
feign.client.config.cartaoBlock.connect-timeout=${CARTAOBLOCK_CONNECT_TIMEOUT:8000}

#URLS Feign
cartoes.host=${CARTOES_URL:localhost:8888}
analise.host=${ANALISE_URL:localhost:9999}

# Actuator + Prometheus
#management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
#management.endpoint.health.show-components=always
#management.endpoints.web.exposure.include=health
management.endpoints.web.exposure.include=health,prometheus
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:servico de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

# Jaeger
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
opentracing.jaeger.service-name=${spring.application.name}
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
# Amostra de operacoes de acordo com uma porcentagem definida (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}
# Amostra constante de todas operacoes - constant
# opentracing.jaeger.const-sampler.decision=${JAEGER_SAMPLER:true}
# Para enviar 10 traces por segundo - rate limit
# opentracing.jaeger.rate-limiting-sampler.max-traces-per-second=${JAEGER_SAMPLER:10}

# spring security resource server
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/desafio-proposta}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/desafio-proposta/protocol/openid-connect/certs}